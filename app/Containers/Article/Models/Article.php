<?php

namespace App\Containers\Article\Models;

use App\Containers\Category\Models\Category;
use App\Containers\View\Models\View;
use App\Containers\Vote\Models\Vote;
use App\Ship\Parents\Models\Model;
use Illuminate\Support\Facades\DB;

/**
 * Class Article
 * @package App\Containers\Article\Models
 *
 * @property integer id
 * @property string title
 * @property string body
 */
class Article extends Model
{
    protected static function boot()
    {
      parent::boot(); // TODO: Change the autogenerated stub

      static::deleting(function(Article $article) {
        // Can be only one SQL query. But, models can include other relations.

        foreach ($article->votes()->get() as $vote) {
          $vote->delete();
        }

        foreach ($article->views()->get() as $view) {
          $view->delete();
        }

        // delete pivot
        DB::table('category_articles')
          ->where('article_id', $article->id)
          ->delete();
      });
    }

    protected $fillable = [
      'title',
      'body',
    ];

    protected $attributes = [

    ];

    protected $hidden = [

    ];

    protected $casts = [
      'title' => 'string',
      'body' => 'string',
    ];

    protected $dates = [
        'created_at',
        'updated_at',
    ];

    /**
     * A resource key to be used by the the JSON API Serializer responses.
     */
    protected $resourceKey = 'articles';

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function votes()
    {
      return $this->hasMany(Vote::class, 'article_id', 'id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function views()
    {
      return $this->hasMany(View::class, 'article_id', 'id');
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function categories()
    {
      return $this->belongsToMany(Category::class, 'category_articles', 'article_id', 'category_id');
    }
}
